from django.db import models
from django.contrib.auth.models import User

# Category model to store product categories
class Category(models.Model):
    name = models.CharField(max_length=100, unique=True)

    def __str__(self):
        return self.name


# Product model to store product details
class Product(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE)  # Link each product to a user
    name = models.CharField(max_length=255)
    description = models.TextField()
    category = models.ForeignKey(Category, on_delete=models.SET_NULL, null=True, blank=True)  # Linked to Category model
    price = models.DecimalField(max_digits=10, decimal_places=2, default=0.00)  # Price field with default value
    eco_impact = models.DecimalField(max_digits=5, decimal_places=2, default=0.00)  # Eco impact as a decimal
    image = models.ImageField(upload_to='product_images/', blank=False, default='product_images/default_image.jpg')  # Image field with default value
    date_added = models.DateTimeField(auto_now_add=True)  # Auto timestamp when product is added
    # Status field to differentiate between 'For Sale', 'For Exchange', and 'For Donate'
    status = models.CharField(
        max_length=20,  # Increased to 20 for future scalability
        choices=[('for_sale', 'For Sale'), ('for_exchange', 'For Exchange'), ('for_donate', 'For Donate')],
        default='for_sale'
    )

    def __str__(self):
        return f"{self.name} by {self.user.username} - {self.get_status_display()}"  # Show status in string representation

    class Meta:
        constraints = [
            models.UniqueConstraint(fields=['user', 'name'], name='unique_user_product')  # Ensure unique product per user
        ]


# UserProfile model to store additional user details (for extending user functionality)
class UserProfile(models.Model):
    user = models.OneToOneField(User, on_delete=models.CASCADE)
    bio = models.TextField(blank=True)  # Bio field, optional
    profile_pic = models.ImageField(upload_to='profile_pics', blank=True)  # Profile picture field, optional
    date_of_birth = models.DateField(null=True, blank=True)  # Optional field for date of birth
    location = models.CharField(max_length=100, blank=True)  # Optional location field

    def __str__(self):
        return f"Profile of {self.user.username}"
